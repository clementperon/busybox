From 49dfbf6962f104c178f0ad8cb19ef1cb3dc17d30 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20P=C3=A9ron?= <peron.clem@gmail.com>
Date: Tue, 27 Dec 2022 20:59:51 +0100
Subject: udhcp: set DHCP messages CoS priority to 6


diff --git a/networking/udhcp/Config.src b/networking/udhcp/Config.src
index 88929792e..fee249192 100644
--- a/networking/udhcp/Config.src
+++ b/networking/udhcp/Config.src
@@ -139,6 +139,14 @@ config UDHCPC_DEFAULT_DECLINE_SCRIPT
 	The script is called after client receives offer from server.
 	Decline script returns 0 when offer should be accepted.
 
+config FEATURE_UDHCPC_COS
+	bool "Support Class of Service for DHCP Client"
+	default y
+	depends on UDHCPC
+	help
+	If selected, udhcpc will set -y socket priority.
+	script returns 1.
+
 config UDHCP_DEBUG
 	int "Maximum verbosity level (0..9)"
 	default 2
diff --git a/networking/udhcp/d6_dhcpc.c b/networking/udhcp/d6_dhcpc.c
index 9d2a8f5d3..0acb6aac9 100644
--- a/networking/udhcp/d6_dhcpc.c
+++ b/networking/udhcp/d6_dhcpc.c
@@ -129,6 +129,7 @@ static const char udhcpc6_longopts[] ALIGN1 =
 	)
 ///	IF_FEATURE_UDHCPC_ARPING("arping\0"	No_argument       "a")
 	IF_FEATURE_UDHCP_PORT("client-port\0"	Required_argument "P")
+	IF_FEATURE_UDHCPC_COS("cos\0"	Required_argument "y")
 	;
 #endif
 /* Must match getopt32 option string order */
@@ -1152,6 +1153,9 @@ static void client_background(void)
 ////usage:	IF_FEATURE_UDHCPC_ARPING(
 ////usage:     "\n	-a		Use arping to validate offered address"
 ////usage:	)
+//usage:	IF_FEATURE_UDHCPC_COS(
+//usage:     "\n	-y PRIORITY	CoS value 0 .. 7, default 0"
+//usage:	)
 //usage:     "\n	-l		Send 'information request' instead of 'solicit'"
 //usage:     "\n			(used for servers which do not assign IPv6 addresses)"
 //usage:     "\n	-r IPv6		Request this address ('no' to not request any IP)"
@@ -1213,6 +1217,7 @@ int udhcpc6_main(int argc UNUSED_PARAM, char **argv)
 		USE_FOR_MMU("b")
 		///IF_FEATURE_UDHCPC_ARPING("a")
 		IF_FEATURE_UDHCP_PORT("P:")
+		IF_FEATURE_UDHCPC_COS("y:+")
 		"v"
 		"\0" IF_UDHCP_VERBOSE("vv") /* -v is a counter */
 		, udhcpc6_longopts
@@ -1222,6 +1227,7 @@ int udhcpc6_main(int argc UNUSED_PARAM, char **argv)
 		, &list_O
 		, &list_x
 		IF_FEATURE_UDHCP_PORT(, &str_P)
+		IF_FEATURE_UDHCPC_COS(, &sk_prio)
 		IF_UDHCP_VERBOSE(, &dhcp_verbose)
 	);
 	requested_ipv6 = NULL;
diff --git a/networking/udhcp/d6_packet.c b/networking/udhcp/d6_packet.c
index c1949f6e3..141cc5e59 100644
--- a/networking/udhcp/d6_packet.c
+++ b/networking/udhcp/d6_packet.c
@@ -111,6 +111,14 @@ int FAST_FUNC d6_send_raw_packet_from_client_data_ifindex(
 	packet.ip6.ip6_hlim = 1; /* observed Windows machines to use hlim=1 */
 	packet.ip6.ip6_nxt = IPPROTO_UDP;
 
+IF_FEATURE_UDHCPC_COS(
+	if (sk_prio) {
+		if (setsockopt(fd, SOL_SOCKET, SO_PRIORITY, &sk_prio, sizeof(sk_prio))) {
+			log1s("raw: SO_PRIORITY (dscp v6) setsockopt() failed");
+		}
+	})
+
+
 	d6_dump_packet(d6_pkt);
 	result = sendto(fd, &packet, offsetof(struct ip6_udp_d6_packet, data) + d6_pkt_size,
 			/*flags:*/ 0,
diff --git a/networking/udhcp/dhcpc.c b/networking/udhcp/dhcpc.c
index cddc9c7ae..3cf9a11c8 100644
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -80,6 +80,7 @@ static const char udhcpc_longopts[] ALIGN1 =
 	IF_FEATURE_UDHCPC_ARPING("arping\0"	Optional_argument "a")
 	IF_FEATURE_UDHCP_PORT("client-port\0"	Required_argument "P")
 	IF_FEATURE_UDHCPC_DECLINE("decline-script\0"	Required_argument "d")
+	IF_FEATURE_UDHCPC_COS("cos\0"	Required_argument "y")
 	;
 #endif
 /* Must match getopt32 option string order */
@@ -1241,6 +1242,9 @@ static int udhcp_run_decline_script(struct dhcp_packet *packet)
 //usage:	IF_FEATURE_UDHCPC_ARPING(
 //usage:     "\n	-a[MSEC]	Validate offered address with ARP ping"
 //usage:	)
+//usage:	IF_FEATURE_UDHCPC_COS(
+//usage:     "\n	-y PRIORITY	CoS value 0 .. 7, default 0"
+//usage:	)
 //usage:     "\n	-r IP		Request this IP address"
 //usage:     "\n	-o		Don't request any options (unless -O is given)"
 //usage:     "\n	-O OPT		Request option OPT from server (cumulative)"
@@ -1307,6 +1311,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 		IF_FEATURE_UDHCPC_ARPING("a::")
 		IF_FEATURE_UDHCP_PORT("P:")
 		IF_FEATURE_UDHCPC_DECLINE("d:")
+		IF_FEATURE_UDHCPC_COS("y:+")
 		"v"
 		"\0" IF_UDHCP_VERBOSE("vv") /* -v is a counter */
 		, udhcpc_longopts
@@ -1320,6 +1325,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 		IF_FEATURE_UDHCPC_ARPING(, &str_a)
 		IF_FEATURE_UDHCP_PORT(, &str_P)
 		IF_FEATURE_UDHCPC_DECLINE(, &client_data.decline_script)
+		IF_FEATURE_UDHCPC_COS(, &sk_prio)
 		IF_UDHCP_VERBOSE(, &dhcp_verbose)
 	);
 	if (opt & OPT_F) {
diff --git a/networking/udhcp/dhcpc.h b/networking/udhcp/dhcpc.h
index ed51683dc..4b5659aef 100644
--- a/networking/udhcp/dhcpc.h
+++ b/networking/udhcp/dhcpc.h
@@ -7,6 +7,8 @@
 
 PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDDEN
 
+IF_FEATURE_UDHCPC_COS(extern uint32_t sk_prio;)
+
 struct client_data_t {
 	uint8_t client_mac[6];          /* Our mac address */
 	IF_FEATURE_UDHCP_PORT(uint16_t port;)
diff --git a/networking/udhcp/packet.c b/networking/udhcp/packet.c
index 78f580ce9..ef56e54d2 100644
--- a/networking/udhcp/packet.c
+++ b/networking/udhcp/packet.c
@@ -12,6 +12,8 @@
 #include <netinet/if_ether.h>
 #include <netpacket/packet.h>
 
+IF_FEATURE_UDHCPC_COS(uint32_t sk_prio;)
+
 #if ENABLE_UDHCPC || ENABLE_UDHCPD
 void FAST_FUNC udhcp_init_header(struct dhcp_packet *packet, char type)
 {
@@ -174,6 +176,13 @@ int FAST_FUNC udhcp_send_raw_packet(struct dhcp_packet *dhcp_pkt,
 	packet.ip.ttl = IPDEFTTL;
 	packet.ip.check = inet_cksum(&packet.ip, sizeof(packet.ip));
 
+IF_FEATURE_UDHCPC_COS(
+	if (sk_prio) {
+		if (setsockopt(fd, SOL_SOCKET, SO_PRIORITY, &sk_prio, sizeof(sk_prio))) {
+			log1s("raw: SO_PRIORITY (dscp v6) setsockopt() failed");
+		}
+	})
+
 	udhcp_dump_packet(dhcp_pkt);
 	result = sendto(fd, &packet, IP_UDP_DHCP_SIZE - padding, /*flags:*/ 0,
 			(struct sockaddr *) &dest_sll, sizeof(dest_sll));
